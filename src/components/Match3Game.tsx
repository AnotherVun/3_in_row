import React, { useState, useEffect } from 'react';
import Cell from './Cell';
import ScoreDisplay from './ScoreDisplay';

interface Match3GameProps {
  onScoreUpdate: (score: number) => void;
}

const fruits = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì', 'üçë', 'üçç', 'ü•ù'];

// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤ —Ñ–æ–Ω–∞
const fruitBackgrounds: Record<string, string> = {
  'üçé': 'bg-red-300',    // –õ–µ–≥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —è–±–ª–æ–∫–∞
  'üçå': 'bg-yellow-300', // –õ–µ–≥–∫–∏–π –∂–µ–ª—Ç—ã–π –¥–ª—è –±–∞–Ω–∞–Ω–∞
  'üçá': 'bg-purple-300', // –õ–µ–≥–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
  'üçä': 'bg-orange-400', // –õ–µ–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∞–ø–µ–ª—å—Å–∏–Ω–∞
  'üçì': 'bg-pink-200',   // –õ–µ–≥–∫–∏–π —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∫–ª—É–±–Ω–∏–∫–∏
  'üçë': 'bg-pink-200',   // –°–≤–µ—Ç–ª—ã–π —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –ø–µ—Ä—Å–∏–∫–∞ (–ø—Ä–∏—à–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç)
  'üçç': 'bg-yellow-200', // –°–≤–µ—Ç–ª—ã–π –∂–µ–ª—Ç—ã–π –¥–ª—è –∞–Ω–∞–Ω–∞—Å–∞ (–ø—Ä–∏—à–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å)
  'ü•ù': 'bg-green-200'   // –õ–µ–≥–∫–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∫–∏–≤–∏
};

const Match3Game: React.FC<Match3GameProps> = ({ onScoreUpdate }) => {
  const rows = 8;
  const cols = 8;
  const [board, setBoard] = useState<string[][]>([]);
  const [selectedCell, setSelectedCell] = useState<number | null>(null);
  const [secondSelectedCell, setSecondSelectedCell] = useState<number | null>(null);
  const [matchedCells, setMatchedCells] = useState<number[]>([]);
  const [newCells, setNewCells] = useState<number[]>([]);
  const [fallingCells, setFallingCells] = useState<number[]>([]);
  const [highlightedCells, setHighlightedCells] = useState<number[]>([]);
  // const [isShuffling, setIsShuffling] = useState(false);
  const [fallDistances, setFallDistances] = useState<Record<number, number>>({});
  const [swappingCells, setSwappingCells] = useState<number[]>([]);
  const [swapDirections, setSwapDirections] = useState<Record<number, string>>({});
  const [loading, setLoading] = useState(true);
  const [score, setScore] = useState(0);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
  // const shuffleBoard = () => {
  //   // –ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
  //   if (matchedCells.length > 0 || highlightedCells.length > 0 || isShuffling) return;

  //   setIsShuffling(true);
  //   setSelectedCell(null);

  //   // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  //   const newBoard = createBoardWithoutMatches();
  //   setBoard(newBoard);

  //   // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –Ω–æ–≤—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
  //   const allCells = Array.from({ length: rows * cols }, (_, i) => i);
  //   setNewCells(allCells);

  //   // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
  //   setTimeout(() => {
  //     setNewCells([]);
  //     setIsShuffling(false);

  //     // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π –¥–æ—Å–∫–µ
  //     checkMatches(newBoard);
  //   }, 500);
  // };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
  const areAdjacent = (index1: number, index2: number) => {
    const row1 = Math.floor(index1 / cols);
    const col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols);
    const col2 = index2 % cols;

    return (
      (Math.abs(row1 - row2) === 1 && col1 === col2) ||
      (Math.abs(col1 - col2) === 1 && row1 === row2)
    );
  };

  // –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const findMatches = (currentBoard: string[][]) => {
    const matched: number[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols - 2; c++) {
        const fruit = currentBoard[r][c];
        if (
          fruit &&
          fruit === currentBoard[r][c + 1] &&
          fruit === currentBoard[r][c + 2]
        ) {
          matched.push(r * cols + c, r * cols + c + 1, r * cols + c + 2);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let c = 0; c < cols; c++) {
      for (let r = 0; r < rows - 2; r++) {
        const fruit = currentBoard[r][c];
        if (
          fruit &&
          fruit === currentBoard[r + 1][c] &&
          fruit === currentBoard[r + 2][c]
        ) {
          matched.push(r * cols + c, (r + 1) * cols + c, (r + 2) * cols + c);
        }
      }
    }

    return [...new Set(matched)];
  };

  // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
  const isValidSwap = (index1: number, index2: number) => {
    const row1 = Math.floor(index1 / cols);
    const col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols);
    const col2 = index2 % cols;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testBoard = board.map(row => [...row]);

    // –ú–µ–Ω—è–µ–º —Ñ—Ä—É–∫—Ç—ã –º–µ—Å—Ç–∞–º–∏
    const temp = testBoard[row1][col1];
    testBoard[row1][col1] = testBoard[row2][col2];
    testBoard[row2][col2] = temp;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
    const matches = findMatches(testBoard);

    return matches.length > 0;
  };

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é swapFruits
  const swapFruits = (index1: number, index2: number) => {
    const row1 = Math.floor(index1 / cols);
    const col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols);
    const col2 = index2 % cols;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤–∞–ø–∞
    let direction1, direction2;
    if (row1 === row2) {
      direction1 = col1 < col2 ? 'right' : 'left';
      direction2 = col1 < col2 ? 'left' : 'right';
    } else {
      direction1 = row1 < row2 ? 'down' : 'up';
      direction2 = row1 < row2 ? 'up' : 'down';
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testBoard = board.map(row => [...row]);
    const temp = testBoard[row1][col1];
    testBoard[row1][col1] = testBoard[row2][col2];
    testBoard[row2][col2] = temp;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ —Å–≤–æ–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (!isValidSwap(row1 * cols + col1, row2 * cols + col2)) {
      // –ï—Å–ª–∏ —Å–≤–æ–ø –Ω–µ —Å–æ–∑–¥–∞–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–º–µ–Ω—ã
      setSwappingCells([index1, index2]);
      setSwapDirections({
        [index1]: `invalid_${direction1}`,
        [index2]: `invalid_${direction2}`
      });

      setTimeout(() => {
        setSwappingCells([]);
        setSwapDirections({});
        setSelectedCell(null);
        setSecondSelectedCell(null);
      }, 800);
      return;
    }

    // –ï—Å–ª–∏ —Å–≤–æ–ø —Å–æ–∑–¥–∞–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    setSwappingCells([index1, index2]);
    setSwapDirections({
      [index1]: direction1,
      [index2]: direction2
    });

    // –ú–µ–Ω—è–µ–º —Ñ—Ä—É–∫—Ç—ã –º–µ—Å—Ç–∞–º–∏ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
      const newBoard = board.map(row => [...row]);
      const temp = newBoard[row1][col1];
      newBoard[row1][col1] = newBoard[row2][col2];
      newBoard[row2][col2] = temp;

      setBoard(newBoard);
      setSwappingCells([]);
      setSwapDirections({});
      setSelectedCell(null);
      setSecondSelectedCell(null);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–≤–∞–ø–∞
      checkMatches(newBoard);
    }, 400);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
  const checkMatches = (currentBoard: string[][]) => {
    const matched: number[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols - 2; c++) {
        const fruit = currentBoard[r][c];
        if (
          fruit &&
          fruit === currentBoard[r][c + 1] &&
          fruit === currentBoard[r][c + 2]
        ) {
          matched.push(r * cols + c, r * cols + c + 1, r * cols + c + 2);
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let c = 0; c < cols; c++) {
      for (let r = 0; r < rows - 2; r++) {
        const fruit = currentBoard[r][c];
        if (
          fruit &&
          fruit === currentBoard[r + 1][c] &&
          fruit === currentBoard[r + 2][c]
        ) {
          matched.push(r * cols + c, (r + 1) * cols + c, (r + 2) * cols + c);
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMatched = [...new Set(matched)];

    if (uniqueMatched.length > 0) {
      setScore(prev => prev + uniqueMatched.length);
      setHighlightedCells(uniqueMatched);

      setTimeout(() => {
        setMatchedCells(uniqueMatched);
        setHighlightedCells([]);

        setTimeout(() => {
          removeMatches(uniqueMatched, currentBoard);
        }, 300);
      }, 800);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ—Ç
  const removeMatches = (matchedIndices: number[], currentBoard: string[][]) => {
    const newBoard = currentBoard.map(row => [...row]);
    const newFruits: number[] = [];
    const fallingCells: number[] = [];
    const fallingDistances: Record<number, number> = {};

    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ —è—á–µ–π–∫–∏ –∫–∞–∫ null
    matchedIndices.forEach((index) => {
      const row = Math.floor(index / cols);
      const col = index % cols;
      newBoard[row][col] = null as unknown as string;
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
    for (let c = 0; c < cols; c++) {
      let emptySpaces = 0;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö
      for (let r = rows - 1; r >= 0; r--) {
        if (newBoard[r][c] === null) {
          emptySpaces++;
        } else if (emptySpaces > 0) {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ—Ä—É–∫—Ç –≤–Ω–∏–∑
          const newRow = r + emptySpaces;
          newBoard[newRow][c] = newBoard[r][c];
          newBoard[r][c] = null as unknown as string;
          fallingCells.push(newRow * cols + c);
          fallingDistances[newRow * cols + c] = emptySpaces;
        }
      }

      // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Å–≤–µ—Ä—Ö—É –Ω–æ–≤—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏
      for (let r = emptySpaces - 1; r >= 0; r--) {
        const randomFruit = fruits[Math.floor(Math.random() * fruits.length)];
        newBoard[r][c] = randomFruit;
        newFruits.push(r * cols + c);
      }
    }

    setBoard(newBoard);
    setMatchedCells([]);
    setFallingCells(fallingCells);
    setFallDistances(fallingDistances);
    setNewCells(newFruits);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
      setFallingCells([]);
      setNewCells([]);
      setFallDistances({});
      checkMatches(newBoard);
    }, 600);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = (index: number) => {
    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±–∏—Ä–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    if (matchedCells.length > 0 || highlightedCells.length > 0) return;

    if (selectedCell === null) {
      // –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
      setSelectedCell(index);
    } else if (selectedCell === index) {
      // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
      setSelectedCell(null);
    } else {
      // –í—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä
      setSecondSelectedCell(index);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏
      if (areAdjacent(selectedCell, index)) {
        // –û–±–º–µ–Ω —Ñ—Ä—É–∫—Ç–æ–≤
        swapFruits(selectedCell, index);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
        setSelectedCell(null);
        setSecondSelectedCell(null);
      } else {
        // –ï—Å–ª–∏ —è—á–µ–π–∫–∏ –Ω–µ —Å–æ—Å–µ–¥–Ω–∏–µ, –º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π
        setSelectedCell(index);
      }
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –¥–æ—Å–∫–µ
  const hasMatches = (board: string[][]): boolean => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let i = 0; i < board.length; i++) {
      for (let j = 0; j < board[i].length - 2; j++) {
        if (board[i][j] === board[i][j + 1] && board[i][j] === board[i][j + 2]) {
          return true;
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let i = 0; i < board.length - 2; i++) {
      for (let j = 0; j < board[i].length; j++) {
        if (board[i][j] === board[i + 1][j] && board[i][j] === board[i + 2][j]) {
          return true;
        }
      }
    }

    return false;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å–∫–∏ –±–µ–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const createBoardWithoutMatches = () => {
    let newBoard: string[][];

    do {
      newBoard = Array(8).fill(null).map(() =>
        Array(8).fill(null).map(() =>
          fruits[Math.floor(Math.random() * fruits.length)]
        )
      );
    } while (hasMatches(newBoard));

    return newBoard;
  };

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
  const initializeGame = () => {
    setLoading(true);
    const newBoard = createBoardWithoutMatches();
    setBoard(newBoard);
    setScore(0);
    onScoreUpdate(0);
    setLoading(false);
  };

  useEffect(() => {
    initializeGame();
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
  useEffect(() => {
    onScoreUpdate(score);
  }, [score, onScoreUpdate]);

  if (loading) {
    return (
      <div className="text-center p-4">
        <div className="text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è...</div>
      </div>
    );
  }

  return (
    <div className="p-4 bg-amber-100 rounded-lg shadow-lg">
      <ScoreDisplay score={score} />
      {/* <button
        onClick={shuffleBoard}
        className="mb-4 px-4 py-2 bg-amber-500 text-white rounded hover:bg-amber-600"
      >
        –ü–µ—Ä–µ–º–µ—à–∞—Ç—å
      </button> */}
      <div className="grid grid-cols-8 gap-2">
        {board.map((row, i) =>
          row.map((fruit, j) => (
            <Cell
              key={`${i}-${j}`}
              fruit={fruit}
              bgColor={fruitBackgrounds[fruit] || 'bg-white/80'}
              isSelected={i * 8 + j === selectedCell || i * 8 + j === secondSelectedCell}
              isMatched={matchedCells.includes(i * 8 + j)}
              isNew={newCells.includes(i * 8 + j)}
              isFalling={fallingCells.includes(i * 8 + j)}
              isHighlighted={highlightedCells.includes(i * 8 + j)}
              isSwapping={swappingCells.includes(i * 8 + j)}
              swapDirection={swapDirections[i * 8 + j] as 'left' | 'right' | 'up' | 'down'}
              fallDistance={fallDistances[i * 8 + j] || 1}
              onClick={() => handleCellClick(i * 8 + j)}
              index={i * 8 + j}
            />
          ))
        )}
      </div>
    </div>
  );
};

export default Match3Game;