import React, { useState, useEffect } from 'react';
import Cell from './Cell';

const fruits = ['üçé', 'üçå', 'üçá', 'üçä', 'üçì', 'üçë', 'üçç', 'ü•ù'];

// –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ —Ü–≤–µ—Ç–æ–≤ —Ñ–æ–Ω–∞
const fruitBackgrounds: Record<string, string> = {
  'üçé': 'bg-red-300',    // –õ–µ–≥–∫–∏–π –∫—Ä–∞—Å–Ω—ã–π –¥–ª—è —è–±–ª–æ–∫–∞
  'üçå': 'bg-yellow-300', // –õ–µ–≥–∫–∏–π –∂–µ–ª—Ç—ã–π –¥–ª—è –±–∞–Ω–∞–Ω–∞
  'üçá': 'bg-purple-300', // –õ–µ–≥–∫–∏–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
  'üçä': 'bg-orange-400', // –õ–µ–≥–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∞–ø–µ–ª—å—Å–∏–Ω–∞
  'üçì': 'bg-pink-200',   // –õ–µ–≥–∫–∏–π —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –∫–ª—É–±–Ω–∏–∫–∏
  'üçë': 'bg-pink-200',   // –°–≤–µ—Ç–ª—ã–π —Ä–æ–∑–æ–≤—ã–π –¥–ª—è –ø–µ—Ä—Å–∏–∫–∞ (–ø—Ä–∏—à–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ü–≤–µ—Ç)
  'üçç': 'bg-yellow-200', // –°–≤–µ—Ç–ª—ã–π –∂–µ–ª—Ç—ã–π –¥–ª—è –∞–Ω–∞–Ω–∞—Å–∞ (–ø—Ä–∏—à–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å)
  'ü•ù': 'bg-green-200'   // –õ–µ–≥–∫–∏–π –∑–µ–ª–µ–Ω—ã–π –¥–ª—è –∫–∏–≤–∏
};

// –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–æ—Å–∫—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏
const createInitialBoard = (rows: number, cols: number) => {
  const board = [];
  for (let i = 0; i < rows * cols; i++) {
    const randomIndex = Math.floor(Math.random() * fruits.length);
    board.push(fruits[randomIndex]);
  }
  return board;
};

const Match3Game: React.FC = () => {
  const rows = 8;
  const cols = 8;
  const [board, setBoard] = useState(createInitialBoard(rows, cols));
  const [selectedCell, setSelectedCell] = useState<number | null>(null);
  const [secondSelectedCell, setSecondSelectedCell] = useState<number | null>(null);
  const [matchedCells, setMatchedCells] = useState<number[]>([]);
  const [newCells, setNewCells] = useState<number[]>([]);
  const [fallingCells, setFallingCells] = useState<number[]>([]);
  const [highlightedCells, setHighlightedCells] = useState<number[]>([]);
  const [isShuffling, setIsShuffling] = useState(false);
  const [fallDistances, setFallDistances] = useState<Record<number, number>>({});
  const [swappingCells, setSwappingCells] = useState<number[]>([]);
  const [swapDirections, setSwapDirections] = useState<Record<number, string>>({});

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –¥–æ—Å–∫–∏
  const shuffleBoard = () => {
    // –ù–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—è
    if (matchedCells.length > 0 || highlightedCells.length > 0 || isShuffling) return;

    setIsShuffling(true);
    setSelectedCell(null);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–æ—Å–∫—É —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Ñ—Ä—É–∫—Ç–∞–º–∏
    const newBoard = createInitialBoard(rows, cols);
    setBoard(newBoard);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —è—á–µ–π–∫–∏ –≤ –Ω–æ–≤—ã–µ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    const allCells = Array.from({ length: rows * cols }, (_, i) => i);
    setNewCells(allCells);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ–≤—ã—Ö —Ñ—Ä—É–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    setTimeout(() => {
      setNewCells([]);
      setIsShuffling(false);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π –¥–æ—Å–∫–µ
      checkMatches(newBoard);
    }, 500);
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
  const areAdjacent = (index1: number, index2: number) => {
    const row1 = Math.floor(index1 / cols);
    const col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols);
    const col2 = index2 % cols;

  return (
      (Math.abs(row1 - row2) === 1 && col1 === col2) ||
      (Math.abs(col1 - col2) === 1 && row1 === row2)
    );
  };

  // –î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const findMatches = (currentBoard: string[]) => {
    const matched: number[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols - 2; c++) {
        const index = r * cols + c;
        const fruit = currentBoard[index];

        if (fruit !== null &&
            fruit === currentBoard[index + 1] &&
            fruit === currentBoard[index + 2]) {
          matched.push(index, index + 1, index + 2);

          if (c < cols - 3 && fruit === currentBoard[index + 3]) {
            matched.push(index + 3);
            if (c < cols - 4 && fruit === currentBoard[index + 4]) {
              matched.push(index + 4);
            }
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let c = 0; c < cols; c++) {
      for (let r = 0; r < rows - 2; r++) {
        const index = r * cols + c;
        const fruit = currentBoard[index];

        if (fruit !== null &&
            fruit === currentBoard[index + cols] &&
            fruit === currentBoard[index + cols * 2]) {
          matched.push(index, index + cols, index + cols * 2);

          if (r < rows - 3 && fruit === currentBoard[index + cols * 3]) {
            matched.push(index + cols * 3);
            if (r < rows - 4 && fruit === currentBoard[index + cols * 4]) {
              matched.push(index + cols * 4);
            }
          }
        }
      }
    }

    return [...new Set(matched)];
  };

  // –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
  const isValidSwap = (index1: number, index2: number) => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const testBoard = [...board];

    // –ú–µ–Ω—è–µ–º —Ñ—Ä—É–∫—Ç—ã –º–µ—Å—Ç–∞–º–∏
    const temp = testBoard[index1];
    testBoard[index1] = testBoard[index2];
    testBoard[index2] = temp;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–∏—Å—å –ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–º–µ–Ω–∞
    const matches = findMatches(testBoard);

    return matches.length > 0;
  };

  // –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é swapFruits
  const swapFruits = (index1: number, index2: number) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤–µ–¥–µ—Ç –ª–∏ –æ–±–º–µ–Ω –∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
    if (!isValidSwap(index1, index2)) {
      const row1 = Math.floor(index1 / cols);
      const col1 = index1 % cols;
      const row2 = Math.floor(index2 / cols);
      const col2 = index2 % cols;

      let direction1, direction2;

      if (row1 === row2) {
        direction1 = col1 < col2 ? 'right' : 'left';
        direction2 = col1 < col2 ? 'left' : 'right';
      } else {
        direction1 = row1 < row2 ? 'down' : 'up';
        direction2 = row1 < row2 ? 'up' : 'down';
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å invalid_ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
      setSwappingCells([index1, index2]);
      setSwapDirections({
        [index1]: `invalid_${direction1}`,
        [index2]: `invalid_${direction2}`
      });

      // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã
      setTimeout(() => {
        setSwappingCells([]);
        setSwapDirections({});
        setSelectedCell(null);
        setSecondSelectedCell(null);
      }, 800); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–æ 800–º—Å –¥–ª—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏

      return;
    }

    // –ï—Å–ª–∏ –æ–±–º–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π
    const row1 = Math.floor(index1 / cols);
    const col1 = index1 % cols;
    const row2 = Math.floor(index2 / cols);
    const col2 = index2 % cols;

    let direction1, direction2;

    if (row1 === row2) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω
      direction1 = col1 < col2 ? 'right' : 'left';
      direction2 = col1 < col2 ? 'left' : 'right';
    } else {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ–±–º–µ–Ω
      direction1 = row1 < row2 ? 'down' : 'up';
      direction2 = row1 < row2 ? 'up' : 'down';
    }

    setSwappingCells([index1, index2]);
    setSwapDirections({
      [index1]: direction1,
      [index2]: direction2
    });

    setTimeout(() => {
      const newBoard = [...board];
      const temp = newBoard[index1];
      newBoard[index1] = newBoard[index2];
      newBoard[index2] = temp;

      setBoard(newBoard);
      setSwappingCells([]);
      setSwapDirections({});

      checkMatches(newBoard);
    }, 400); // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –¥–æ 0.4 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
  const checkMatches = (currentBoard: string[]) => {
    const matched: number[] = [];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let r = 0; r < rows; r++) {
      for (let c = 0; c < cols - 2; c++) {
        const index = r * cols + c;
        const fruit = currentBoard[index];

        if (fruit !== null &&
            fruit === currentBoard[index + 1] &&
            fruit === currentBoard[index + 2]) {
          matched.push(index, index + 1, index + 2);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º 4-–π –∏ 5-–π —Ñ—Ä—É–∫—Ç –≤ —Ä—è–¥—É
          if (c < cols - 3 && fruit === currentBoard[index + 3]) {
            matched.push(index + 3);
            if (c < cols - 4 && fruit === currentBoard[index + 4]) {
              matched.push(index + 4);
            }
          }
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let c = 0; c < cols; c++) {
      for (let r = 0; r < rows - 2; r++) {
        const index = r * cols + c;
        const fruit = currentBoard[index];

        if (fruit !== null &&
            fruit === currentBoard[index + cols] &&
            fruit === currentBoard[index + cols * 2]) {
          matched.push(index, index + cols, index + cols * 2);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º 4-–π –∏ 5-–π —Ñ—Ä—É–∫—Ç –≤ —Å—Ç–æ–ª–±—Ü–µ
          if (r < rows - 3 && fruit === currentBoard[index + cols * 3]) {
            matched.push(index + cols * 3);
            if (r < rows - 4 && fruit === currentBoard[index + cols * 4]) {
              matched.push(index + cols * 4);
            }
          }
        }
      }
    }

    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMatched = [...new Set(matched)];

    if (uniqueMatched.length > 0) {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —è—á–µ–π–∫–∏ –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
      setHighlightedCells(uniqueMatched);

      // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
      setTimeout(() => {
        setMatchedCells(uniqueMatched);
        setHighlightedCells([]); // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É

        // –£–¥–∞–ª—è–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ —Ñ—Ä—É–∫—Ç—ã –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        setTimeout(() => {
          removeMatches(uniqueMatched, currentBoard);
        }, 300); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 500–º—Å –¥–æ 300–º—Å
      }, 800); // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1000–º—Å –¥–æ 800–º—Å –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—É—Å—Ç–æ—Ç
  const removeMatches = (matchedIndices: number[], currentBoard: string[]) => {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏
    const newBoard = [...currentBoard];
    const newFruits: number[] = [];
    const fallingCells: number[] = [];
    const fallingDistances: Record<number, number> = {};

    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–µ —è—á–µ–π–∫–∏ –∫–∞–∫ null
    matchedIndices.forEach((index) => {
      newBoard[index] = null as unknown as string;
    });

    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
    for (let c = 0; c < cols; c++) {
      let emptyCount = 0;
      const emptyRows: number[] = [];

      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ö–æ–¥–∏–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö –∏ –Ω–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
      for (let r = rows - 1; r >= 0; r--) {
        const index = r * cols + c;
        if (newBoard[index] === null) {
          emptyCount++;
          emptyRows.push(r); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        }
      }

      // –ï—Å–ª–∏ –≤ —Å—Ç–æ–ª–±—Ü–µ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
      if (emptyCount === 0) continue;

      // –°–Ω–æ–≤–∞ –ø—Ä–æ—Ö–æ–¥–∏–º —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –ø–µ—Ä–µ–º–µ—â–∞—è —Ñ—Ä—É–∫—Ç—ã –≤–Ω–∏–∑
      for (let r = rows - 1; r >= 0; r--) {
        const index = r * cols + c;

        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —è—á–µ–π–∫–∞ –ø—É—Å—Ç–∞—è, –∏—â–µ–º —Ñ—Ä—É–∫—Ç —Å–≤–µ—Ä—Ö—É –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if (newBoard[index] === null) {
          // –ù–∞–π–¥–µ–º –±–ª–∏–∂–∞–π—à–∏–π —Ñ—Ä—É–∫—Ç —Å–≤–µ—Ä—Ö—É
          let foundFruit = false;

          for (let above = r - 1; above >= 0; above--) {
            const aboveIndex = above * cols + c;

            if (newBoard[aboveIndex] !== null) {
              // –ù–∞—à–ª–∏ —Ñ—Ä—É–∫—Ç - –ø–µ—Ä–µ–º–µ—â–∞–µ–º –µ–≥–æ –≤–Ω–∏–∑
              newBoard[index] = newBoard[aboveIndex];
              newBoard[aboveIndex] = null as unknown as string;

              // –û—Ç–º–µ—á–∞–µ–º —ç—Ç—É —è—á–µ–π–∫—É –∫–∞–∫ –ø–∞–¥–∞—é—â—É—é
              fallingCells.push(index);

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –ø–∞–¥–µ–Ω–∏—è (—Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö)
              fallingDistances[index] = r - above;

              foundFruit = true;
              break;
            }
          }

          // –ï—Å–ª–∏ —Ñ—Ä—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ —Å–≤–µ—Ä—Ö—É
          if (!foundFruit) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ—Ä—É–∫—Ç
            const randomIndex = Math.floor(Math.random() * fruits.length);
            newBoard[index] = fruits[randomIndex];
            newFruits.push(index);
          }
        }
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setBoard(newBoard);
    setMatchedCells([]);
    setFallingCells(fallingCells);
    setFallDistances(fallingDistances);
    setNewCells(newFruits);

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤—Ä–µ–º—è
    setTimeout(() => {
      setMatchedCells([]);
      setFallingCells([]);
      setNewCells([]);
      setFallDistances({});
    }, 600);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    setTimeout(() => {
      checkMatches(newBoard);
    }, 700);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = (index: number) => {
    // –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –≤—ã–±–∏—Ä–∞—Ç—å, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–ª–∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞
    if (matchedCells.length > 0 || highlightedCells.length > 0) return;

    if (selectedCell === null) {
      // –ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä
      setSelectedCell(index);
    } else if (selectedCell === index) {
      // –û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞
      setSelectedCell(null);
    } else {
      // –í—Ç–æ—Ä–æ–π –≤—ã–±–æ—Ä
      setSecondSelectedCell(index);

      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏
      if (areAdjacent(selectedCell, index)) {
        // –û–±–º–µ–Ω —Ñ—Ä—É–∫—Ç–æ–≤
        swapFruits(selectedCell, index);

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —è—á–µ–π–∫–∏
        setSelectedCell(null);
        setSecondSelectedCell(null);
      } else {
        // –ï—Å–ª–∏ —è—á–µ–π–∫–∏ –Ω–µ —Å–æ—Å–µ–¥–Ω–∏–µ, –º–µ–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –Ω–∞ —Ç–µ–∫—É—â–∏–π
        setSelectedCell(index);
      }
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    checkMatches(board);
  }, []);

  return (
    <div className="p-4 bg-amber-100 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-bold text-amber-800">Match 3</h2>
        <button
          onClick={shuffleBoard}
          disabled={matchedCells.length > 0 || highlightedCells.length > 0 || isShuffling}
          className={`px-4 py-2 rounded-lg font-medium
                    ${(matchedCells.length > 0 || highlightedCells.length > 0 || isShuffling)
                      ? 'bg-gray-300 cursor-not-allowed'
                      : 'bg-amber-500 hover:bg-amber-600 active:bg-amber-700 cursor-pointer'}`}
        >
          –ü–µ—Ä–µ–º–µ—à–∞—Ç—å
        </button>
      </div>
      <div className="grid grid-cols-8 gap-2">
        {board.map((fruit, index) => (
          <Cell
            key={index}
            index={index}
            fruit={fruit}
            bgColor={fruitBackgrounds[fruit] || 'bg-white/80'}
            isSelected={index === selectedCell || index === secondSelectedCell}
            isMatched={matchedCells.includes(index)}
            isNew={newCells.includes(index)}
            isFalling={fallingCells.includes(index)}
            isHighlighted={highlightedCells.includes(index)}
            isSwapping={swappingCells.includes(index)}
            swapDirection={swapDirections[index] as 'left' | 'right' | 'up' | 'down'}
            fallDistance={fallDistances[index] || 1}
            onClick={() => handleCellClick(index)}
          />
        ))}
      </div>
    </div>
  );
};

export default Match3Game;